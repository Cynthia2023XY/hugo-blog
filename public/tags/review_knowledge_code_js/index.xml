<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Review_knowledge_code_js on My New Hugo Site</title>
    <link>http://localhost:1313/tags/review_knowledge_code_js/</link>
    <description>Recent content in Review_knowledge_code_js on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/review_knowledge_code_js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/posts/json%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%94%AF%E6%8C%81%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/json%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%94%AF%E6%8C%81%E6%B3%A8%E9%87%8A/</guid>
      <description>#review/knowledge/code/js&#xA;因为JSON 是⼀种数据格式，目的就是短小精悍减少冗余，所以它是不⽀持注释的。&#xA;但是诸如 json5 等插件可以让 JSON 来⽀持注释，当然也有其他技巧（⽐如 JSON.minify，{&amp;ldquo;comment&amp;rdquo;:&amp;ldquo;foobar&amp;rdquo;}）来让JSON间接⽀持 注释。 程序员：我硬要注释！&#xA;JSON的设计者（Douglas Crockford）意图让JSON尽可能的简单。 注释会增加解析器的复杂性，并且可能会被滥用（例如，将注释用作数据的一部分），这与JSON作为一种数据格式的初衷相悖 YAML 是 &amp;#34;YAML Ain&amp;#39;t a Markup Language&amp;#34;（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：&amp;#34;Yet Another Markup Language&amp;#34;（仍是一种标记语言）。 YAML 的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。它使用空白符号缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大纲（例如：许多电子邮件标题格式和YAML非常接近）。 YAML 的配置文件后缀为 .yml，如：runoob.yml 。 YAML 最常见的用途之一是创建配置文件。&#xA;相比 JSON，因为 YAML 有更好的可读性，对用户更友好，所以通常建议用 YAML 来编写配置文件，尽管它们在大多数情况下可以互换使用。&#xA;除了在 Ansible 中使用之外，YAML 还用于 Kubernetes 资源和部署。&#xA;使用 YAML 的一大好处是，YAML 文件可以添加到源代码控制中，比如 Github，这样就可以跟踪和审计变更。&#xA;title: YAML基本语法 - 大小写敏感 - 使用缩进表示层级关系 - 缩进不允许使用tab，只允许空格 - 缩进的空格数不重要，只要相同层级的元素左对齐即可 - &amp;#39;#&amp;#39;表示注释 </description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/posts/js%E5%92%8Cjson%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/js%E5%92%8Cjson%E5%8C%BA%E5%88%AB/</guid>
      <description>#review/knowledge/code/js&#xA;json只支持双引号，不支持单引号 json不支持功能函数function js是一种编程语言，而json是一种数据格式 js中的对象和数组等数据结构可以通过json来表示和交换 json可以在多种语言间进行传输和解析，而js只能被js解析 </description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/posts/js%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8Fobject-literal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/js%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8Fobject-literal/</guid>
      <description>#review/knowledge/code/js #review/function&#xA;在JavaScript中，有几种不同的方法来定义对象。 一种非常常见的方法是使用对象字面量，它通过在大括号内列出其属性来实现。&#xA;const object1 = { name: &amp;#39;Arto Hellas&amp;#39;, age: 35, education: &amp;#39;PhD&amp;#39;, } const object2 = { name: &amp;#39;Full Stack web application development&amp;#39;, level: &amp;#39;intermediate studies&amp;#39;, size: 5, } const object3 = { name: { first: &amp;#39;Dan&amp;#39;, last: &amp;#39;Abramov&amp;#39;, }, grades: [2, 3, 5, 3], department: &amp;#39;Stanford University&amp;#39;, } 属性的值可以是任何类型的，比如整数、字符串、数组、对象&amp;hellip;&amp;hellip;&#xA;title:js的对象字面量（object literal）看起来很像C++的结构体? JavaScript 的对象字面量确实在概念上与 C++ 中的结构体（struct）有一些相似之处，尽管它们在语法和使用上存在差异。以下是两者之间的一些相似点和不同点： ### 相似之处： 1. **数据结构**：两者都用于创建包含多个属性（或成员变量）的数据结构，这些属性可以是不同类型的数据。 2. **封装**：它们提供了一种封装数据的方式，使得数据和操作这些数据的函数或方法可以组合在一起。 3. **访问属性**：在两种结构中，属性都通过点符号（`.`）访问，例如 `object.name` 或 `structInstance.name`。 ### 不同之处： 1.</description>
    </item>
  </channel>
</rss>
